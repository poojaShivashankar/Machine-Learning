{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "<h1><center> SUPPORT VECTOR MACHINE</center></h1>\n",
    "\n",
    "<p align> Support vector machine(SVM) are defined as supervised learning models in machine learning. These models are associated with learning algorithms which are used to analyze the data which can be used for analysis classification and regression methods. It is a representation of examples as points in space which are mapped. There are many real time applications of SVM. They are used predominantly in classification problems.</p>\n",
    "<p align> In addition to performing linear classification, SVMs can efficiently perform a non-linear classification using what is called the kernel trick, implicitly mapping their inputs into high-dimensional feature spaces.</p>\n",
    "<p align>More formally, a support vector machine constructs a hyperplane or set of hyperplanes in a high- or infinite-dimensional space, which can be used for classification, regression, or other tasks. Intuitively, a good separation is achieved by the hyperplane that has the largest distance to the nearest training-data point of any class (so-called functional margin), since in general the larger the margin the lower the generalization error of the classifier.</p>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#import all the packages needed for the program\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn import svm\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.grid_search import GridSearchCV\n",
    "from mlxtend.plotting import plot_decision_regions\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We are using the iris dataset. This dataset consists of 150 instances and 4 attributes. The 4 attributes are sepal length, sepal width, petal length and petal width which are all measured in centimetres. We are using sepal length and sepal width to predict whether the flower is Iris Setosa, Iris Versicolour or Iris Virginica. We denote 1 for Iris Setosa, 2 for Iris Versicolor and 3 for Iris Virginica.\n",
    "We are loading the dataset and considering only two features, sepal length and sepal width for our implementation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#Reading features and response from the csv file using pandas \n",
    "df=pd.read_csv(\"/home/sathyanarayanan/iris.csv\")\n",
    "X=df.iloc[:,0:2]\n",
    "Y=df[[\"Y\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Converting X and Y to matrix format \n",
    "x=np.asmatrix(X)\n",
    "y=np.asmatrix(Y)\n",
    "y=np.ravel(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Splitting dataset into train and test set\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.2, random_state=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>Here, we are defining a function called performance. It computes the percentage of correct predictions and returns the accuracy</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def performance(Y_test,y_pred):\n",
    "    correct=0\n",
    "    for i in range(len(Y_test)):\n",
    "        if Y_test[i] == y_pred[i]:\n",
    "            correct += 1\n",
    "    accuracy=correct / float(len(Y_test)) * 100.0\n",
    "    return accuracy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p align> Here we are tning our hyper parameters needed for grid search </p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#parameter tuning\n",
    "tuned_params_linear={\"C\":[1e0,0.1,1e-2,1e-3,0.5,2,3,5]}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>We are using gridsearchCV to perform Linear Kernel SVM and to tune our hyper parameters. We use 5 fold cross validation in grid search. We calculate accuracy using our function performance.</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Performing grid search for linear kernel\n",
    "grid_linear = GridSearchCV(svm.SVC(kernel='linear',C=tuned_params_linear[\"C\"]),tuned_params_linear, cv=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5, error_score='raise',\n",
       "       estimator=SVC(C=[1.0, 0.1, 0.01, 0.001, 0.5, 2, 3, 5], cache_size=200,\n",
       "  class_weight=None, coef0=0.0, decision_function_shape=None, degree=3,\n",
       "  gamma='auto', kernel='linear', max_iter=-1, probability=False,\n",
       "  random_state=None, shrinking=True, tol=0.001, verbose=False),\n",
       "       fit_params={}, iid=True, n_jobs=1,\n",
       "       param_grid={'C': [1.0, 0.1, 0.01, 0.001, 0.5, 2, 3, 5]},\n",
       "       pre_dispatch='2*n_jobs', refit=True, scoring=None, verbose=0)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Invoking the classifier\n",
    "grid_linear.fit(X_train,Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[mean: 0.78333, std: 0.06896, params: {'C': 1.0},\n",
       " mean: 0.77500, std: 0.05229, params: {'C': 0.1},\n",
       " mean: 0.62500, std: 0.07753, params: {'C': 0.01},\n",
       " mean: 0.36667, std: 0.00688, params: {'C': 0.001},\n",
       " mean: 0.78333, std: 0.08143, params: {'C': 0.5},\n",
       " mean: 0.75833, std: 0.07143, params: {'C': 2},\n",
       " mean: 0.75833, std: 0.07143, params: {'C': 3},\n",
       " mean: 0.75833, std: 0.07143, params: {'C': 5}]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Printing the mean and standard deviation for the hyperparameter C\n",
    "grid_linear.grid_scores_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'C': 1.0}"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#finding best parameter\n",
    "grid_linear.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7833333333333333"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_linear.best_score_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>The best score obtained was 0.783 for the hyperparameter value C=1.0</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Calculating the predicted values \n",
    "Y_pred_lin=grid_linear.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Accuracy calculation\n",
    "acc_lin=performance(Y_test,Y_pred_lin)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy of linear kernel is 80.0%\n"
     ]
    }
   ],
   "source": [
    "print(\"accuracy of linear kernel is \" + str(acc_lin)+ \"%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#parameter tuning for gaussian kernel\n",
    "tuned_params_gauss={\"C\":[1e0,0.1,1e-2,1e-3,0.5,2,3,5],\"gamma\":[0.001,0.0001,0.01,0.1,1,0.5,2,3,10]}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>We are using gridsearchCV to perform Gaussian Kernel SVM and to tune our hyper parameters. We use 5 fold cross validation in grid search. We calculate accuracy using our function performance.</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Performing grid search\n",
    "grid_gauss = GridSearchCV(svm.SVC(kernel='rbf', gamma=tuned_params_gauss[\"gamma\"], C=tuned_params_gauss[\"C\"]),tuned_params_gauss, cv=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5, error_score='raise',\n",
       "       estimator=SVC(C=[1.0, 0.1, 0.01, 0.001, 0.5, 2, 3, 5], cache_size=200,\n",
       "  class_weight=None, coef0=0.0, decision_function_shape=None, degree=3,\n",
       "  gamma=[0.001, 0.0001, 0.01, 0.1, 1, 0.5, 2, 3, 10], kernel='rbf',\n",
       "  max_iter=-1, probability=False, random_state=None, shrinking=True,\n",
       "  tol=0.001, verbose=False),\n",
       "       fit_params={}, iid=True, n_jobs=1,\n",
       "       param_grid={'gamma': [0.001, 0.0001, 0.01, 0.1, 1, 0.5, 2, 3, 10], 'C': [1.0, 0.1, 0.01, 0.001, 0.5, 2, 3, 5]},\n",
       "       pre_dispatch='2*n_jobs', refit=True, scoring=None, verbose=0)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Invoking the classifier\n",
    "grid_gauss.fit(X_train,Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[mean: 0.36667, std: 0.00688, params: {'gamma': 0.001, 'C': 1.0},\n",
       " mean: 0.36667, std: 0.00688, params: {'gamma': 0.0001, 'C': 1.0},\n",
       " mean: 0.67500, std: 0.02333, params: {'gamma': 0.01, 'C': 1.0},\n",
       " mean: 0.78333, std: 0.08143, params: {'gamma': 0.1, 'C': 1.0},\n",
       " mean: 0.77500, std: 0.07450, params: {'gamma': 1, 'C': 1.0},\n",
       " mean: 0.75833, std: 0.08154, params: {'gamma': 0.5, 'C': 1.0},\n",
       " mean: 0.78333, std: 0.08270, params: {'gamma': 2, 'C': 1.0},\n",
       " mean: 0.78333, std: 0.06468, params: {'gamma': 3, 'C': 1.0},\n",
       " mean: 0.70833, std: 0.02599, params: {'gamma': 10, 'C': 1.0},\n",
       " mean: 0.36667, std: 0.00688, params: {'gamma': 0.001, 'C': 0.1},\n",
       " mean: 0.36667, std: 0.00688, params: {'gamma': 0.0001, 'C': 0.1},\n",
       " mean: 0.36667, std: 0.00688, params: {'gamma': 0.01, 'C': 0.1},\n",
       " mean: 0.67500, std: 0.02333, params: {'gamma': 0.1, 'C': 0.1},\n",
       " mean: 0.75000, std: 0.04422, params: {'gamma': 1, 'C': 0.1},\n",
       " mean: 0.70833, std: 0.02599, params: {'gamma': 0.5, 'C': 0.1},\n",
       " mean: 0.70833, std: 0.03910, params: {'gamma': 2, 'C': 0.1},\n",
       " mean: 0.67500, std: 0.02723, params: {'gamma': 3, 'C': 0.1},\n",
       " mean: 0.61667, std: 0.02186, params: {'gamma': 10, 'C': 0.1},\n",
       " mean: 0.36667, std: 0.00688, params: {'gamma': 0.001, 'C': 0.01},\n",
       " mean: 0.36667, std: 0.00688, params: {'gamma': 0.0001, 'C': 0.01},\n",
       " mean: 0.36667, std: 0.00688, params: {'gamma': 0.01, 'C': 0.01},\n",
       " mean: 0.36667, std: 0.00688, params: {'gamma': 0.1, 'C': 0.01},\n",
       " mean: 0.36667, std: 0.00688, params: {'gamma': 1, 'C': 0.01},\n",
       " mean: 0.36667, std: 0.00688, params: {'gamma': 0.5, 'C': 0.01},\n",
       " mean: 0.36667, std: 0.00688, params: {'gamma': 2, 'C': 0.01},\n",
       " mean: 0.36667, std: 0.00688, params: {'gamma': 3, 'C': 0.01},\n",
       " mean: 0.36667, std: 0.00688, params: {'gamma': 10, 'C': 0.01},\n",
       " mean: 0.36667, std: 0.00688, params: {'gamma': 0.001, 'C': 0.001},\n",
       " mean: 0.36667, std: 0.00688, params: {'gamma': 0.0001, 'C': 0.001},\n",
       " mean: 0.36667, std: 0.00688, params: {'gamma': 0.01, 'C': 0.001},\n",
       " mean: 0.36667, std: 0.00688, params: {'gamma': 0.1, 'C': 0.001},\n",
       " mean: 0.36667, std: 0.00688, params: {'gamma': 1, 'C': 0.001},\n",
       " mean: 0.36667, std: 0.00688, params: {'gamma': 0.5, 'C': 0.001},\n",
       " mean: 0.36667, std: 0.00688, params: {'gamma': 2, 'C': 0.001},\n",
       " mean: 0.36667, std: 0.00688, params: {'gamma': 3, 'C': 0.001},\n",
       " mean: 0.36667, std: 0.00688, params: {'gamma': 10, 'C': 0.001},\n",
       " mean: 0.36667, std: 0.00688, params: {'gamma': 0.001, 'C': 0.5},\n",
       " mean: 0.36667, std: 0.00688, params: {'gamma': 0.0001, 'C': 0.5},\n",
       " mean: 0.61667, std: 0.09277, params: {'gamma': 0.01, 'C': 0.5},\n",
       " mean: 0.78333, std: 0.05329, params: {'gamma': 0.1, 'C': 0.5},\n",
       " mean: 0.76667, std: 0.06941, params: {'gamma': 1, 'C': 0.5},\n",
       " mean: 0.77500, std: 0.07450, params: {'gamma': 0.5, 'C': 0.5},\n",
       " mean: 0.78333, std: 0.08270, params: {'gamma': 2, 'C': 0.5},\n",
       " mean: 0.77500, std: 0.07450, params: {'gamma': 3, 'C': 0.5},\n",
       " mean: 0.71667, std: 0.00740, params: {'gamma': 10, 'C': 0.5},\n",
       " mean: 0.36667, std: 0.00688, params: {'gamma': 0.001, 'C': 2},\n",
       " mean: 0.36667, std: 0.00688, params: {'gamma': 0.0001, 'C': 2},\n",
       " mean: 0.70000, std: 0.04614, params: {'gamma': 0.01, 'C': 2},\n",
       " mean: 0.78333, std: 0.06896, params: {'gamma': 0.1, 'C': 2},\n",
       " mean: 0.78333, std: 0.08270, params: {'gamma': 1, 'C': 2},\n",
       " mean: 0.77500, std: 0.07450, params: {'gamma': 0.5, 'C': 2},\n",
       " mean: 0.80000, std: 0.06543, params: {'gamma': 2, 'C': 2},\n",
       " mean: 0.77500, std: 0.07286, params: {'gamma': 3, 'C': 2},\n",
       " mean: 0.70833, std: 0.04496, params: {'gamma': 10, 'C': 2},\n",
       " mean: 0.36667, std: 0.00688, params: {'gamma': 0.001, 'C': 3},\n",
       " mean: 0.36667, std: 0.00688, params: {'gamma': 0.0001, 'C': 3},\n",
       " mean: 0.73333, std: 0.04447, params: {'gamma': 0.01, 'C': 3},\n",
       " mean: 0.78333, std: 0.06896, params: {'gamma': 0.1, 'C': 3},\n",
       " mean: 0.78333, std: 0.08270, params: {'gamma': 1, 'C': 3},\n",
       " mean: 0.78333, std: 0.08270, params: {'gamma': 0.5, 'C': 3},\n",
       " mean: 0.79167, std: 0.07178, params: {'gamma': 2, 'C': 3},\n",
       " mean: 0.77500, std: 0.07286, params: {'gamma': 3, 'C': 3},\n",
       " mean: 0.68333, std: 0.06373, params: {'gamma': 10, 'C': 3},\n",
       " mean: 0.62500, std: 0.07753, params: {'gamma': 0.001, 'C': 5},\n",
       " mean: 0.36667, std: 0.00688, params: {'gamma': 0.0001, 'C': 5},\n",
       " mean: 0.77500, std: 0.05229, params: {'gamma': 0.01, 'C': 5},\n",
       " mean: 0.78333, std: 0.06503, params: {'gamma': 0.1, 'C': 5},\n",
       " mean: 0.78333, std: 0.08270, params: {'gamma': 1, 'C': 5},\n",
       " mean: 0.78333, std: 0.08270, params: {'gamma': 0.5, 'C': 5},\n",
       " mean: 0.79167, std: 0.07178, params: {'gamma': 2, 'C': 5},\n",
       " mean: 0.75833, std: 0.05431, params: {'gamma': 3, 'C': 5},\n",
       " mean: 0.65833, std: 0.04743, params: {'gamma': 10, 'C': 5}]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Printing the grid_scores for different combinations of hyperparameters\n",
    "grid_gauss.grid_scores_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'C': 2, 'gamma': 2}"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#getting best parameters\n",
    "grid_gauss.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#getting best score\n",
    "grid_gauss.best_score_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p align> We are getting the best score as 0.8 for our best parameters </p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Calculating predicted values\n",
    "y_pred_gauss=grid_gauss.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Accuracy calculation\n",
    "acc_gauss=performance(Y_test,y_pred_gauss)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy of gaussian kernel is 80.0%\n"
     ]
    }
   ],
   "source": [
    "print(\"accuracy of gaussian kernel is \"+ str(acc_gauss) +\"%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Parameter tuning \n",
    "tuned_params_poly={\"degree\":[2,3,4,5],\"C\":[1e0,0.1,1e-2,1e-3,0.5,2,3,5]}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Performing grid search\n",
    "grid_poly = GridSearchCV(svm.SVC(kernel='poly',degree=tuned_params_poly[\"degree\"], C=tuned_params_poly[\"C\"]),tuned_params_poly, cv=5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>We are using gridsearchCV to perform Polynomial Kernel SVM and to tune our hyper parameters. We use 5 fold cross validation in grid search. We calculate accuracy using our function performance.</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5, error_score='raise',\n",
       "       estimator=SVC(C=[1.0, 0.1, 0.01, 0.001, 0.5, 2, 3, 5], cache_size=200,\n",
       "  class_weight=None, coef0=0.0, decision_function_shape=None,\n",
       "  degree=[2, 3, 4, 5], gamma='auto', kernel='poly', max_iter=-1,\n",
       "  probability=False, random_state=None, shrinking=True, tol=0.001,\n",
       "  verbose=False),\n",
       "       fit_params={}, iid=True, n_jobs=1,\n",
       "       param_grid={'C': [1.0, 0.1, 0.01, 0.001, 0.5, 2, 3, 5], 'degree': [2, 3, 4, 5]},\n",
       "       pre_dispatch='2*n_jobs', refit=True, scoring=None, verbose=0)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#invoking classifier\n",
    "grid_poly.fit(X_train,Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[mean: 0.75833, std: 0.05042, params: {'C': 1.0, 'degree': 2},\n",
       " mean: 0.79167, std: 0.05747, params: {'C': 1.0, 'degree': 3},\n",
       " mean: 0.77500, std: 0.06368, params: {'C': 1.0, 'degree': 4},\n",
       " mean: 0.78333, std: 0.08476, params: {'C': 1.0, 'degree': 5},\n",
       " mean: 0.76667, std: 0.04474, params: {'C': 0.1, 'degree': 2},\n",
       " mean: 0.77500, std: 0.05496, params: {'C': 0.1, 'degree': 3},\n",
       " mean: 0.77500, std: 0.03920, params: {'C': 0.1, 'degree': 4},\n",
       " mean: 0.78333, std: 0.05275, params: {'C': 0.1, 'degree': 5},\n",
       " mean: 0.80000, std: 0.06896, params: {'C': 0.01, 'degree': 2},\n",
       " mean: 0.75000, std: 0.03844, params: {'C': 0.01, 'degree': 3},\n",
       " mean: 0.77500, std: 0.08421, params: {'C': 0.01, 'degree': 4},\n",
       " mean: 0.77500, std: 0.03920, params: {'C': 0.01, 'degree': 5},\n",
       " mean: 0.66667, std: 0.02662, params: {'C': 0.001, 'degree': 2},\n",
       " mean: 0.78333, std: 0.06341, params: {'C': 0.001, 'degree': 3},\n",
       " mean: 0.77500, std: 0.03920, params: {'C': 0.001, 'degree': 4},\n",
       " mean: 0.79167, std: 0.06771, params: {'C': 0.001, 'degree': 5},\n",
       " mean: 0.75833, std: 0.05042, params: {'C': 0.5, 'degree': 2},\n",
       " mean: 0.79167, std: 0.07797, params: {'C': 0.5, 'degree': 3},\n",
       " mean: 0.77500, std: 0.05879, params: {'C': 0.5, 'degree': 4},\n",
       " mean: 0.79167, std: 0.09141, params: {'C': 0.5, 'degree': 5},\n",
       " mean: 0.75833, std: 0.05042, params: {'C': 2, 'degree': 2},\n",
       " mean: 0.79167, std: 0.05747, params: {'C': 2, 'degree': 3},\n",
       " mean: 0.77500, std: 0.05879, params: {'C': 2, 'degree': 4},\n",
       " mean: 0.77500, std: 0.06822, params: {'C': 2, 'degree': 5},\n",
       " mean: 0.75833, std: 0.05042, params: {'C': 3, 'degree': 2},\n",
       " mean: 0.79167, std: 0.05747, params: {'C': 3, 'degree': 3},\n",
       " mean: 0.77500, std: 0.05879, params: {'C': 3, 'degree': 4},\n",
       " mean: 0.79167, std: 0.08269, params: {'C': 3, 'degree': 5},\n",
       " mean: 0.75833, std: 0.05042, params: {'C': 5, 'degree': 2},\n",
       " mean: 0.78333, std: 0.06305, params: {'C': 5, 'degree': 3},\n",
       " mean: 0.78333, std: 0.06858, params: {'C': 5, 'degree': 4},\n",
       " mean: 0.75000, std: 0.05397, params: {'C': 5, 'degree': 5}]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Calculating best scores for polynomial kernel\n",
    "grid_poly.grid_scores_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'C': 0.01, 'degree': 2}"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_poly.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_poly.best_score_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p align>We are getting the best score as 0.8 for our best parameters</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Calculating predicted values\n",
    "y_pred_poly=grid_poly.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Accuracy calculation\n",
    "acc_poly=performance(Y_test,y_pred_poly)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy of polynomial kernel is 83.33333333333334%\n"
     ]
    }
   ],
   "source": [
    "print(\"accuracy of polynomial kernel is \"+str(acc_poly)+\"%\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p align> From the above we can come to a conclusion that gaussian kernel performs better for our dataset. We verify this by visualising trivial dataset and estimating its performance.</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 248,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Shuffling of the dataframe\n",
    "dataset=df.sample(frac=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>trivial_X contains two features- sepal length and sepal width and trivial_Y contains the response.</p> "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "trivial_X=dataset.iloc[:,0:2]\n",
    "trivial_Y=dataset[[\"Y\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 250,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Converting the trivial dataset to matrix format\n",
    "trivial_x=np.asmatrix(trivial_X)\n",
    "trivial_y=np.asmatrix(trivial_Y)\n",
    "trivial_y=np.ravel(trivial_y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 251,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#sample data for plotting graph with few datapoints\n",
    "sample_x_train=trivial_x[0:50,:]\n",
    "sample_y_train=trivial_y[0:50,]\n",
    "sample_x_test=trivial_x[80:120,:]\n",
    "sample_y_test=trivial_y[80:120,]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 252,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Parameter tuning\n",
    "tune_param_lin_plot={\"C\":[1.0]}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 253,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Grid search\n",
    "grid_linear_plot = GridSearchCV(svm.SVC(kernel='linear',C=tune_param_lin_plot[\"C\"]),tune_param_lin_plot,cv=5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>We are using gridsearchCV to perform the computations inside fit method of the classifier and use 5 fold cross validation and tuning of hyper parameters using grid search. We calculate accuracy using our function performance.</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 254,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5, error_score='raise',\n",
       "       estimator=SVC(C=[1.0], cache_size=200, class_weight=None, coef0=0.0,\n",
       "  decision_function_shape=None, degree=3, gamma='auto', kernel='linear',\n",
       "  max_iter=-1, probability=False, random_state=None, shrinking=True,\n",
       "  tol=0.001, verbose=False),\n",
       "       fit_params={}, iid=True, n_jobs=1, param_grid={'C': [1.0]},\n",
       "       pre_dispatch='2*n_jobs', refit=True, scoring=None, verbose=0)"
      ]
     },
     "execution_count": 254,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_linear_plot.fit(sample_x_train,sample_y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 255,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Calculating predicted values for the linear kernel plot\n",
    "y_pred_lin_plot=grid_linear_plot.predict(sample_x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 256,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Accuracy calculation for the linear kernel plot\n",
    "acc_lin_plot=performance(sample_y_test,y_pred_lin_plot)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 273,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy of SVM linear kernel is 82.5%\n"
     ]
    }
   ],
   "source": [
    "print(\"accuracy of SVM linear kernel is \"+str(acc_lin_plot)+\"%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 258,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nM7M2/x+ocheoGec+IQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fe6228b7400>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Graph plotting for linear SVM\n",
    "plot_decision_regions(np.asarray(sample_x_test),np.asarray(sample_y_test),grid_linear_plot)\n",
    "plt.xlabel(\"sepal length\")\n",
    "plt.ylabel(\"sepal width\")\n",
    "plt.title(\"Linear SVM\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 259,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Parameter tuning\n",
    "tuned_params_poly_plot={\"degree\":[2],\"C\":[0.01]}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 260,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Performing grid search\n",
    "grid_poly_plot = GridSearchCV(svm.SVC(kernel='poly',degree=tuned_params_poly_plot[\"degree\"], C=tuned_params_poly_plot[\"C\"]),tuned_params_poly_plot, cv=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 261,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5, error_score='raise',\n",
       "       estimator=SVC(C=[0.01], cache_size=200, class_weight=None, coef0=0.0,\n",
       "  decision_function_shape=None, degree=[2], gamma='auto', kernel='poly',\n",
       "  max_iter=-1, probability=False, random_state=None, shrinking=True,\n",
       "  tol=0.001, verbose=False),\n",
       "       fit_params={}, iid=True, n_jobs=1,\n",
       "       param_grid={'C': [0.01], 'degree': [2]}, pre_dispatch='2*n_jobs',\n",
       "       refit=True, scoring=None, verbose=0)"
      ]
     },
     "execution_count": 261,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_poly_plot.fit(sample_x_train,sample_y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 262,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Calculating predicted values for polynomial kernel for trivial dataset\n",
    "y_pred_poly_plot=grid_poly_plot.predict(sample_x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 263,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Calculating accuracy for polynomial kernel plot\n",
    "acc_poly_plot=performance(sample_y_test,y_pred_poly_plot)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 274,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy of SVM polynomial kernel is 82.5%\n"
     ]
    }
   ],
   "source": [
    "print(\"accuracy of SVM polynomial kernel is \"+str(acc_poly_plot)+\"%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 265,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fe62286be80>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plotting graph \n",
    "plot_decision_regions(np.asarray(sample_x_test),np.asarray(sample_y_test),grid_poly_plot)\n",
    "plt.xlabel(\"sepal length\")\n",
    "plt.ylabel(\"sepal width\")\n",
    "plt.title(\"Polynomial SVM\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 266,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Parameter tuning\n",
    "tuned_params_gauss_plot={\"gamma\":[2],\"C\":[2]}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 267,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Performing grid search\n",
    "grid_gauss_plot = GridSearchCV(svm.SVC(kernel='rbf',gamma=tuned_params_gauss_plot[\"gamma\"], C=tuned_params_gauss_plot[\"C\"]),tuned_params_gauss_plot, cv=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 268,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5, error_score='raise',\n",
       "       estimator=SVC(C=[2], cache_size=200, class_weight=None, coef0=0.0,\n",
       "  decision_function_shape=None, degree=3, gamma=[2], kernel='rbf',\n",
       "  max_iter=-1, probability=False, random_state=None, shrinking=True,\n",
       "  tol=0.001, verbose=False),\n",
       "       fit_params={}, iid=True, n_jobs=1,\n",
       "       param_grid={'gamma': [2], 'C': [2]}, pre_dispatch='2*n_jobs',\n",
       "       refit=True, scoring=None, verbose=0)"
      ]
     },
     "execution_count": 268,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_gauss_plot.fit(sample_x_train,sample_y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 269,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Calculating predicted values for gaussian kernel plot\n",
    "y_pred_gauss_plot=grid_gauss_plot.predict(sample_x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 270,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Accuracy calculation for gaussian kernel plot\n",
    "acc_gauss_plot=performance(sample_y_test,y_pred_gauss_plot)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 275,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy of SVM gaussian kernel is 77.5%\n"
     ]
    }
   ],
   "source": [
    "print(\"accuracy of SVM gaussian kernel is \"+str(acc_gauss_plot)+\"%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 272,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fe6227c6d68>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plotting graph for gaussian SVM\n",
    "plot_decision_regions(np.asarray(sample_x_test),np.asarray(sample_y_test),grid_gauss_plot)\n",
    "plt.xlabel(\"sepal length\")\n",
    "plt.ylabel(\"sepal width\")\n",
    "plt.title(\"Gaussian SVM\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p><b>Conclusion:</b> From the above graphs, it is clear that the polynomial SVM performs better than the linear and gaussian models for the iris dataset that we have considered.</p>"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [default]",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
